<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    version="5.0"  xml:id="framework-pojo">

      <title>Non-Persistent Properties and POJOs</title>
  <para>LinkRest maintains a model of all entities that can be exposed via REST. All persistent
    entities present in the underlying ORM (usually Cayenne) are automatically added to LinkRest
    model. What if you want to expose additional non-persistent properties of peristent objects or
    build entire request chains that are not based on persistent entities? There are three
    annotations to help with it: <code>@LrAttribute</code> or <code>@LrRelationship</code> and
      <code>@LrId</code>.</para>
  <para>The first example is a typical Cayenne persistent class that has some transient
    properties:</para>
  <para>
    <programlisting language="java">import com.nhl.link.rest.annotation.LrAttribute;

// a typical Cayenne persistent class
public class Domain extends _Domain {

  @LrAttribute
  public String getLowercaseName() {
    return getName().toLowerCase();
  }
}</programlisting>
  </para>
  <para>This one was simple. The second example is an entire POJO not known to
    Cayenne:<programlisting language="java">import com.nhl.link.rest.annotation.LrAttribute;
import com.nhl.link.rest.annotation.LrRelationship;

// a POJO not mapped in Cayenne
public class SomeClass {

  private int id;
  private String string;
  private SomeOtherClass related;

  @LrId
  public int getId() {
    return id;
  }
  
  @LrAttribute
  public String getString() {
    return string;
  }

  @LrRelationship 
  public SomeOtherClass getRelated() {
    return related;
  }
}</programlisting></para>
  <para>Creating and annotating a POJO was easy. But LinkRest still requires a backend that knows
    how to select and/or update those POJOs. Such custom "backends" can be configured per request
    chain using chain listener API. It is up to the caller what strategy the backend would utilize
    (maybe a REST call, or reading/writing from a NoSQL DB, etc.) :
    <programlisting language="java">// an object with methods annotated with one of the
// 'com.nhl.link.rest.annotation.listener' annotations
SomeCustomBackend altBackend = new SomeCustomBackend();

LinkRest.select(SomeClass.class, config).listener(altBackend).uri(urlInfo).get();</programlisting></para>

</chapter>

